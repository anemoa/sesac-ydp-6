<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 폼</title>
    
    <!-- jQuery CDN (ajax를 간편하게 사용하고자 불러옴) -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <!-- Axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title %></h1>
    <form name="register">
        <label for="name">이름</label>
        <input type="text" name="name" id="name" required>
        <br>

        <span>성별</span>
        <input type="radio" name="gender" id="male" value="남자" required>
        <label for="male">남자</label>
        <input type="radio" name="gender" id="female" value="여자">
        <label for="female">여자</label>
        <br>
        <button type="button" onclick="ajaxGet();">ajax get 방식 요청</button>
        <button type="button" onclick="ajaxPost();">ajax post 방식 요청</button>
        <button type="button" onclick="axiosGet();">Axios get 방식 요청</button>
        <button type="button" onclick="axiosPost();">Axios post 방식 요청</button>
        <button type="button" onclick="fetchGet();">Fetch get 방식 요청</button>
        <button type="button" onclick="fetchPost();">Fetch post 방식 요청</button>
    </form>

    <button onclick="getTodos();"> 외부 API를 이용해 TODO 불러오기</button>

    <div class="result">

    </div>

    <script>
        const resultBox = document.querySelector('.result');

        function getTodos(){
            fetch('https://jsonplaceholder.typicode.com/todos/15')
            .then(res => res.json())
            .then( json => {
                console.log(json);
                resultBox.textContent = `${json.title} (${json.completed ? 'done' : 'doing'})`;
            })
        }

        function fetchPost(){
            console.log('click fetch Post');
            // 폼 선택하기
            const form = document.forms['register'];

            // 서버로 보낼 데이터 양식 생성하기
            const data = {
                name: form.name.value,
                gender: form.gender.value
            };

            // fetch: POST 요청시 headers 옵션을 통해 JSON 포맷을 사용한다고 알려줘야 함\
            // => body에서도 json 형식으로 데이터를 바꿔 보내야 함
            fetch(`fetch`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data), // js object를 json으로 바꿔서 body에 보내야 한다.
            })
                .then((res) => {
                    console.log(res);
                    return res.json(); // res 객체로부터 json 포맷의 응답을 js object로 변환
                })
                .then((data) => {
                    console.log(data); // js object
                    resultBox.textContent = `POST /fetch 요청에 의한 응답 완료! ${data.name}님은 ${data.gender}시군요`;
                    resultBox.style.color = 'violet';
                });
        }

        function fetchGet(){
            console.log('click fetch Get');
            // 폼 선택하기
            const form = document.forms['register'];
            const urlQuery = `?name=${form.name.value}&gender=${form.gender.value}`;

            //fetch(): 디폴트로 get 방식으로 동작
            // fetch(`fetch${urlQuery}`, {method: 'GET'})
            fetch(`fetch${urlQuery}`)
                .then((res) => {
                    console.log(res);
                    return res.json(); // res 객체로부터 json 포맷의 응답을 js object로 변환
                })
                .then((data) => {
                    console.log(data); // js object
                    resultBox.textContent = `GET /fetch 요청에 의한 응답 완료! ${data.name}님은 ${data.gender}시군요`;
                    resultBox.style.color = 'limegreen';
                });
        }

        function axiosPost(){
            console.log('click axios Post');
            // 폼 선택하기
            const form = document.forms['register'];

            // 서버로 보낼 데이터 양식 생성하기
            const data = {
                name: form.name.value,
                gender: form.gender.value
            };

            axios({
                method: 'POST',
                url: '/axios',
                data, // data: data // GET 요청이 아닌 요청들은 모두 data 키에 정보를 실어서 보내야 함
            }).then((res) => {
                console.log(res.data);
                const {name, gender} = res.data;

                resultBox.textContent = `GET /axios 요청에 의한 응답 완료! ${name}님은 ${gender}시군요`;
                resultBox.style.color = 'gold';
            })
        }

        function axiosGet(){
            console.log('axiosGet 오키');
            // 폼 선택하기
            const form = document.forms['register'];

            // 서버로 보낼 데이터 양식 생성하기
            const data = {
                name: form.name.value,
                gender: form.gender.value
            };

            // axios 비동기 통신 (get 방식)
            // 1. 이름 미입력: '이름 입력해주세요'
            // 2. 성별 미입력: '성별 선택해주세요'
            // 3. 이름과 성별이 모두 입력되었다면 정상적으로 요청 날리기
            
            console.log(form.name.checkValidity());
            console.log(form.gender[0].checkValidity());
            console.log(form.gender[1].checkValidity());
            //radio type input은 둘 중 하나라도 체크되면 전부 true 출력, 아니면 false 출력

            if(!form.name.checkValidity()){
                resultBox.textContent = '이름 채워';
            }else if(!form.gender[0].checkValidity()){
                resultBox.textContent = '성별 선택해';
            }else{
                    axios({
                    method: 'GET',
                    // 1. params 키를 이용하지 않는다면 url에 query string을 작성
                    url: `axios?name=${form.name.value}&gender=${form.gender.value}`,
                    // 2. params 키를 이용하는 경우
                    // url: '/axios',
                    // params: data,
                }).then(function(response){
                    console.log(response); // axios 서버의 응답 결과를 부가적인 정보와 함께 출력
                    console.log(response.data); // index.js의 res.send(req.query) 그 데이터가 담김
                    // console.log(response.status); // HTTP Status Code (상태 코드)
                    // console.log(response.statusText); // OK
                    // console.log(response.headers);
                    // console.log(response.config);

                    const {name, gender} = response.data // {name: '션', gender: '여자'}
                    resultBox.textContent = `GET /axios 요청에 의한 응답 완료! ${name}님은 ${gender}시군요`;
                    resultBox.style.color = 'lime';
                }).catch(function(err){
                    console.error('Error' ,err);
                    resultBox.textContent = '에러 발생! 다시 시도';
                })
            }            
        }

        function ajaxPost(){
            console.log('click ajax Post');
            // 폼 선택하기
            const form = document.forms['register'];

            // 서버로 보낼 데이터 양식 생성하기
            const data = {
                name: form.name.value,
                gender: form.gender.value
            };

            // ajax 비동기 통신 (POST 방식) 
            $.ajax({
                type: 'POST',
                url: '/ajax', // 이 요청을 받을 "서버 측 경로"
                data, // data: data // {name: form.name.value, gender: form.gender.value};
                success: function(data){
                    console.log(data);
                    resultBox.textContent = `POST / ajax 요청에 대한 응답 완료! ${data.name}님은 ${data.gender} 이시죠? :)`;
                    resultBox.style.color = 'pink';
                }
            });
        }

        function ajaxGet(){
            console.log('click btn');

            // 폼 선택하기
            const form = document.forms['register'];

            // 폼 요소의 값을 추출
            console.dir(form);
            console.dir(form.name);
            console.dir(form.gender);
            console.dir(form.name.value);
            console.dir(form.gender.value);

            // 서버로 보낼 데이터 양식 생성하기
            const data = {
                name: form.name.value,
                gender: form.gender.value
            };

            // ajax 비동기 통신 (GET 방식) 
            // (서버의 index.js 파일로 유저가 브라우저에 입력한 값을 보내기)
            $.ajax({
                type: 'GET',
                url: '/ajax', // 이 요청을 받을 "서버 측 경로"
                data, // data: data // {name: form.name.value, gender: form.gender.value};
                success: function(data){
                    console.log(data);
                    resultBox.textContent = `GET / ajax 요청에 대한 응답 완료! ${data.name}님은 ${data.gender} 이시죠? :)`;
                    resultBox.style.color = 'green'
                }
            })
        }
    </script>
</body>
</html>